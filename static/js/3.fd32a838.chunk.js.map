{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/profile/profileInfo/profileInfo.module.css","components/profile/myPosts/myPosts.module.css","components/profile/myPosts/post/post.module.css","components/profile/profileInfo/profileStatusWithHooks.jsx","components/profile/profileInfo/profileDataForm.jsx","components/profile/profileInfo/profileInfo.jsx","components/profile/myPosts/post/post.jsx","components/profile/myPosts/newPost/newPostForm.jsx","components/profile/myPosts/myPosts.jsx","components/profile/myPosts/myPostsContainer.jsx","components/profile/profile.jsx","components/profile/profileContainer.jsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","isOwner","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","ProfileDataForm","profile","onMainPhotoSelected","onEditMode","handleSubmit","error","maxLengthCreator","profile_block","onSubmit","photo","src","photos","large","userPhoto","alt","inputPhoto","type","Field","component","Input","name","name_input","placeholder","look_job","Textarea","contacts","Object","keys","map","key","contactKey","contactValue","editBtn","ss","formSummaryError","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","onClick","Contacts","WithFormProfileDataForm","reduxForm","form","ProfileInfo","savePhoto","saveProfile","editForm","setEditForm","target","files","length","initialValues","formData","then","Post","post","post_text","message","liked","maxLengthCreator10","NewPostForm","newPost","validate","requiredField","newPost__button","MyPosts","postsElements","postData","item","id","WithFormNewPostform","myPosts","addPost","newPostBody","reset","posts","MyPostsContainer","profilePage","Profile","ProfileContainer","refreshProfileAndStatus","userId","match","params","authorizedUserId","setUserProfile","getUserStatus","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.fd32a838.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\n\nlet mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login' />;\n            return <Component {...this.props} />\n\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n\n\n    return ConnectedAuthRedirectComponent; \n}\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_block\":\"profileInfo_profile_block__3uLBK\",\"photo\":\"profileInfo_photo__rDY5z\",\"name\":\"profileInfo_name__3TJT-\",\"name_input\":\"profileInfo_name_input__3hniE\",\"contacts\":\"profileInfo_contacts__3fDYR\",\"status\":\"profileInfo_status__3cswA\",\"look_job\":\"profileInfo_look_job__3MuFI\",\"inputPhoto\":\"profileInfo_inputPhoto__yZc-o\",\"editBtn\":\"profileInfo_editBtn__317ju\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"myPosts_myPosts__3aNwc\",\"newPost\":\"myPosts_newPost__3Bzbq\",\"newPost__button\":\"myPosts_newPost__button__ImRPF\",\"posts\":\"myPosts_posts__2xQuF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3xCi7\",\"post_text\":\"post_post_text__3-yHt\"};","import React, { useState, useEffect } from 'react';\nimport s from './profileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n\n\n    }\n    return (\n\n        <div className={s.status}>\n            <b>Status:</b>\n            {!editMode &&\n                <div>\n                {props.isOwner ?  <span onDoubleClick={activateEditMode} > {props.status || '---'} </span> : <span> {props.status || '---'} </span>}\n                   \n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input autoFocus\n                        onBlur={deactivateEditMode}\n                        value={status}\n                        onChange={onStatusChange}\n                    />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './profileInfo.module.css';\nimport userPhoto from '../.././../assets/images/user.png'\nimport Preloader from '../../common/preloader/preloader';\nimport ProfileStatusWithHooks from './profileStatusWithHooks';\nimport { Contacts } from './profileInfo';\nimport { Field } from 'redux-form';\nimport { Textarea, Input } from '../../common/formsControls/formsControls';\nimport { requiredField, maxLengthCreator } from '../../../utils/validators/validators';\nimport ss from '../../common/formsControls/formsControls.module.css'\n\n\n\n\nconst ProfileDataForm = ({ profile, status, updateStatus, isOwner, onEditMode, onMainPhotoSelected, handleSubmit, error }) => {\n    const maxLengthCreator50 = maxLengthCreator(50);\n\n\n    return (\n        <form className={s.profile_block} onSubmit={handleSubmit}>\n            <div className={s.photo}>\n                <img src={profile.photos.large ? profile.photos.large : userPhoto} alt='profile' />\n                <div className={s.inputPhoto}> {isOwner && <input type={'file'} onChange={onMainPhotoSelected} ></input>}</div>\n            </div>\n\n            <Field component={Input}\n                type={'text'}\n                name={'fullName'}\n                className={s.name_input}\n                placeholder='enter fullname'\n            // validate={[requiredField, maxLengthCreator50]}\n            />\n                       \n            <ProfileStatusWithHooks profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner} />\n            <div className={s.look_job}>\n                <div>\n                    <b>Looking for a job description:</b>\n                </div>\n                <div>\n                    <Field component={Input}\n                        type={'checkbox'}\n                        name={'lookingForAJob'}\n                    // validate={[requiredField, maxLengthCreator50]}\n                    />\n                    <Field component={Textarea}\n                        type={'text'}\n                        name={'lookingForAJobDescription'}\n                        placeholder='enter looking For A Job Description'\n                    // validate={[requiredField, maxLengthCreator50]}\n                    />\n\n                    <Field component={Textarea}\n                        type={'text'}\n                        name={'aboutMe'}\n                        placeholder='enter aboutMe'\n                    // validate={[requiredField, maxLengthCreator50]}\n                    />\n\n                </div>\n            </div>\n\n            <div className={s.contacts}>\n                <div><b>Contacts:</b></div>\n                {Object.keys(profile.contacts).map(key => {\n                    return <Contacts key={key}\n                        contactKey={key}\n                        contactValue={\n                            <Field component={Input}\n                        type={'text'}\n                        name={'contacts.'+ key}\n                        placeholder={key}\n                    // validate={[requiredField, maxLengthCreator50]}\n                    />\n\n\n                        } />\n                })}\n            </div>\n            \n            {isOwner && <div className={s.editBtn}><button>save profile</button></div>}\n\n            {error &&\n                <div className={ss.formSummaryError}>\n                    {error}\n                </div>\n            }\n\n        </form>\n    )\n}\n\n\nexport default ProfileDataForm;\n","import React, { useState } from 'react';\nimport s from './profileInfo.module.css';\nimport userPhoto from '../.././../assets/images/user.png'\nimport Preloader from '../../common/preloader/preloader';\nimport ProfileStatusWithHooks from './profileStatusWithHooks';\nimport ProfileDataForm from './profileDataForm';\nimport { reduxForm } from 'redux-form';\n\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n\n    let [editForm, setEditForm] = useState(false);\n\n    const onEditMode = () => {\n        setEditForm(!editForm);\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(() => {\n            setEditForm(false);\n        })\n    }\n\n    return (\n        <div>\n            <div>\n                <img src='https://static.ngs.ru/news/99/preview/4714ecaebbaf4a7f76cf322e68baad5a149080807_824_549_c.png' alt='MyProfile'></img>\n            </div>\n\n            {editForm\n                ? <WithFormProfileDataForm initialValues={profile}\n                    profile={profile}\n                    status={status}\n                    updateStatus={updateStatus}\n                    isOwner={isOwner}\n                    onEditMode={onEditMode}\n                    onMainPhotoSelected={onMainPhotoSelected}\n                    onSubmit={onSubmit} />\n                : <ProfileData profile={profile}\n                    status={status}\n                    updateStatus={updateStatus}\n                    isOwner={isOwner}\n                    onEditMode={onEditMode}\n                    onMainPhotoSelected={onMainPhotoSelected}\n                />\n            }\n\n\n\n\n\n\n\n\n\n        </div>\n    )\n}\n\n\n\nconst ProfileData = ({ profile, status, updateStatus, isOwner, onEditMode, onMainPhotoSelected }) => {\n\n\n\n    return (\n\n        <div className={s.profile_block}>\n            <div className={s.photo}>\n                <img src={profile.photos.large ? profile.photos.large : userPhoto} alt='profile' />\n                <div className={s.inputPhoto}> {isOwner && <input type={'file'} onChange={onMainPhotoSelected} ></input>}</div>\n            </div>\n\n            <div className={s.name}>\n                {profile.fullName}\n            </div>\n\n            <ProfileStatusWithHooks profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner} />\n            <div className={s.look_job}>\n                <div>\n                    <b>Looking for a job description:</b>\n                </div>\n                <div>\n                    {profile.lookingForAJob ? profile.lookingForAJobDescription : \"No\"}\n                </div>\n            </div>\n\n            <div className={s.contacts}>\n                <div><b>Contacts:</b></div>\n                {Object.keys(profile.contacts).map(key => {\n                    return <Contacts key={key}\n                        contactKey={key}\n                        contactValue={profile.contacts[key]} />\n                })}\n            </div>\n            {isOwner && <div className={s.editBtn}><button onClick={onEditMode} >edit profile</button></div>}\n\n        </div>\n    )\n}\n\n\nexport const Contacts = ({ contactKey, contactValue }) => {\n    return (\n        <>\n            <div>{contactKey} : {contactValue}</div>\n        </>)\n}\n\n\nconst WithFormProfileDataForm = reduxForm({\n    form: 'profileData'\n})(ProfileDataForm)\n\nexport default ProfileInfo;","import React from 'react';\nimport s from './post.module.css';\n\nconst Post = (props) => {\n\n    return (\n        <div className={s.post}>\n            <img src='https://www.meme-arsenal.com/memes/bf0296e8bfa92558d0ca180289194068.jpg' alt='avatar'></img>\n            <span className={s.post_text} >{props.message} </span>\n            <div>\n                Liked {props.liked}\n            </div>\n        </div>\n    )\n\n}\n\nexport default Post;","import React from 'react';\nimport s from '../myPosts.module.css';\nimport { Field } from 'redux-form';\nimport { requiredField, maxLengthCreator } from '../../../../utils/validators/validators';\nimport { Textarea } from '../../../common/formsControls/formsControls';\n\nconst maxLengthCreator10 = maxLengthCreator(10);\n\nconst NewPostForm = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit} className={s.newPost}>\n            <div>\n                <Field component={Textarea}\n                    type={'text'}\n                    placeholder='new post'\n                    name={'newPostBody'}\n                    validate={[requiredField, maxLengthCreator10]}\n\n                />\n            </div>\n            <div>\n                <button\n                    className={s.newPost__button}\n                    type={'submit'}\n                >Add post\n                </button>\n            </div>\n        </form>\n    )\n}\n\nexport default NewPostForm;","import React from 'react';\nimport s from './myPosts.module.css';\nimport Post from './post/post'\nimport NewPostForm from './newPost/newPostForm';\nimport { reduxForm, reset } from 'redux-form';\n\n\n\nconst MyPosts = (props) => {\n\n    let postsElements = props.postData.map(item => <Post key={item.id} id={item.id} message={item.message} liked={item.liked} />);\n\n    const onAddPost = (formData) => {\n        props.addPost(formData.newPostBody);\n        reset()\n    }\n\n    const WithFormNewPostform = reduxForm({\n        form: 'addPost'\n    })(NewPostForm)\n    \n\n\n    return (\n        <div className={s.myPosts}>\n            <h3>My posts:</h3>\n            <WithFormNewPostform onSubmit={onAddPost} />\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nexport default MyPosts;","import { addPost } from '../../../redux/profileReducer';\nimport MyPosts from './myPosts';\nimport { connect } from 'react-redux';\n\n\nconst mstp = (state) => {\n    return {\n        postData:state.profilePage.postData,\n    }\n}\n\n\n\nconst MyPostsContainer = connect(mstp, {addPost})(MyPosts);\nexport default MyPostsContainer;","import React from 'react';\nimport s from './profile.module.css';\nimport ProfileInfo from './profileInfo/profileInfo';\nimport MyPostsContainer from './myPosts/myPostsContainer';\n\nconst Profile = ({ isOwner, profile, status, updateStatus, savePhoto, saveProfile }) => {\n\n    return (\n        <div>\n            <ProfileInfo isOwner={isOwner}\n                profile={profile}\n                status={status}\n                updateStatus={updateStatus}\n                savePhoto={savePhoto}\n                saveProfile={saveProfile} />\n            <MyPostsContainer />\n        </div>\n    )\n\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport Profile from './profile';\nimport { connect } from 'react-redux';\nimport { addPost, setUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profileReducer';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\n\nclass ProfileContainer extends Component {\n\n    refreshProfileAndStatus = () => {\n        let userId = this.props.match.params.userId ? this.props.match.params.userId : this.props.authorizedUserId;\n        this.props.setUserProfile(userId);\n        this.props.getUserStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfileAndStatus()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.refreshProfileAndStatus()\n        }\n    }\n\n    render() {\n\n\n        return (\n            <Profile {... this.props}\n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto} /> // разворачиваем все пропсы по аттрибутам и направляем в компоненту Profile\n        )\n    }\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth,\n    }\n\n}\n\n\nexport default compose(\n    connect(mapStateToProps, { addPost, setUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter,\n    withAuthRedirect,\n)(ProfileContainer);\n"],"sourceRoot":""}